AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Lambdas, API Gateway Endpoint,Fargate task, SNS topics for NFT processing
Parameters:
  pNftBucketName:
    Type: String
    Description: Bucket where NFT Metadata will be stored
  pIpRangeWhitelist:
    Type: String
    Description: IP range that is allowed to invoke the nftapi
  pNetworkId:
    Type: String
    Default: "n-ethereum-rinkeby"
  pInstanceType:
    Type: String
    Default: "bc.t3.large"
  pAvailabilityZone:
    Type: String
Resources:
  EthereumNode:
    Type: "AWS::ManagedBlockchain::Node"
    Properties:
      NetworkId: !Ref pNetworkId
      NodeConfiguration:
        InstanceType: !Ref pInstanceType
        AvailabilityZone: !Ref pAvailabilityZone

  MetadataBucket:
   Type: AWS::S3::Bucket
   Properties:
      BucketName: !Join ['-', [!Ref AWS::AccountId,!Ref pNftBucketName]]
      PublicAccessBlockConfiguration: 
        RestrictPublicBuckets: TRUE
      LoggingConfiguration:
        # DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: access-logs
      BucketEncryption: 
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256   

  
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: nftapi
    Properties:
      LogGroupName: !Sub /aws/apigateway/${nftapi}
      RetentionInDays: 7

  nftapi:
    Type: AWS::Serverless::Api
    DependsOn: ApiCWLRoleArn
    Properties:
      StageName: nftapi
      TracingEnabled: true
      OpenApiVersion: 3.0.2
      AccessLogSetting:
        DestinationArn: !Sub ${ApiAccessLogGroup.Arn} # This Log Group is already created within our SAM Template
        Format: "{ 'requestId':'$context.requestId', 'ip': '$context.identity.sourceIp', 'caller':'$context.identity.caller', 'user':'$context.identity.user','requestTime':'$context.requestTime', 'xrayTraceId':'$context.xrayTraceId', 'wafResponseCode':'$context.wafResponseCode', 'httpMethod':'$context.httpMethod','resourcePath':'$context.resourcePath', 'status':'$context.status','protocol':'$context.protocol', 'responseLength':'$context.responseLength' }"
      MethodSettings:
        - MetricsEnabled: True
          ResourcePath: '/*'
          HttpMethod: '*'
      Cors:
        AllowMethods: "'POST, GET, OPTIONS'"
        AllowHeaders: "'X-Forwarded-For, Content-type, Authorization'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
      Auth:
        ResourcePolicy:
          IpRangeWhitelist: 
            - !Ref pIpRangeWhitelist
        Authorizers:  
          MyLambdaTokenAuth:
            FunctionArn: !GetAtt nftauth.Arn
  
  ApiCWLRoleArn:
    Type: AWS::ApiGateway::Account
    Properties: 
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn

# IAM Role for API GW + CWL
  CloudWatchRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Path: /
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'


  nftmint:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
       Variables:
         nodeId: !GetAtt EthereumNode.NodeId
         networkId: !GetAtt EthereumNode.NetworkId
         bucketName: !Ref MetadataBucket
         pvtkey: "ethSystemKey"
         waitConfirmations: "false" 
      Handler: index.handler
      Runtime: nodejs14.x
      CodeUri: lambdas/nftmint/.
      Description: Call the AWS Lambda API for NFT
      Timeout: 30
      Role: !GetAtt nftMintRole.Arn
      Events:
        postEndpoint:
          Type: Api
          Properties:
            RestApiId: !Ref nftapi
            Path: /mint
            Method: POST
      Layers:
        - !Ref onchainUtils

  nftMintRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              Action: 'sts:AssumeRole'
              Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
          ManagedPolicyArns:
            - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            - arn:aws:iam::aws:policy/AWSLambda_ReadOnlyAccess
            - arn:aws:iam::aws:policy/AmazonManagedBlockchainFullAccess
            - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
          Path: /
          Policies:
            - PolicyName: S3WritePolicy
              PolicyDocument: 
                Version: '2012-10-17'
                Statement:
                  Action: 
                    - "s3:PutObject"
                    - "s3:PutObjectAcl"
                    - "s3:PutLifecycleConfiguration"
                  Effect: Allow
                  Resource:
                    - !Join ['', ['arn:aws:s3:::',!Ref MetadataBucket, '/*']]
                    - !Join ['', ['arn:aws:s3:::',!Ref MetadataBucket]]
  
  nftDetails:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
       Variables:
         nodeId: !GetAtt EthereumNode.NodeId
         networkId: !GetAtt EthereumNode.NetworkId
      Handler: index.handler
      Runtime: nodejs14.x
      CodeUri: lambdas/nftdetails/.
      Description: Call the AWS Lambda API for NFT Details
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AmazonManagedBlockchainFullAccess 
        # - AmazonSSMReadOnlyAccess
      Events:
          getEndpoint:
            Type: Api
            Properties:
              RestApiId: !Ref nftapi
              Path: /details
              Method: GET
      Layers:
        - !Ref onchainUtils

  nftdeploy:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
       Variables:
         nodeId: !GetAtt EthereumNode.NodeId
         networkId: !GetAtt EthereumNode.NetworkId
         bucketName: !Ref MetadataBucket
         pvtkey: "ethSystemKey"
      Handler: index.handler
      Runtime: nodejs14.x
      CodeUri: lambdas/nftdeploy/.
      Description: Call the AWS Lambda API to deploy a sample nft contract
      Timeout: 10
      # Function's execution role
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AmazonManagedBlockchainFullAccess 
        - AmazonSSMReadOnlyAccess
      Events:
        postEndpoint:
          Type: Api
          Properties:
            RestApiId: !Ref nftapi
            Path: /deploy
            Method: POST
      Layers:
        - !Ref onchainUtils
  nftauth:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          nodeId: !GetAtt EthereumNode.NodeId
          networkId: !GetAtt EthereumNode.NetworkId
          bucketName: !Ref MetadataBucket
          pvtkey: "ethSystemKey"
      Handler: index.handler
      Runtime: nodejs14.x
      CodeUri: lambdas/nftauth/.
      Description: LambdaAuthorizer 
      Timeout: 10
      # Function's execution role
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AmazonManagedBlockchainFullAccess 
        - AmazonSSMReadOnlyAccess
      Layers:
        - !Ref onchainUtils

  nftMetadata: 
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          nodeId: !GetAtt EthereumNode.NodeId
          networkId: !GetAtt EthereumNode.NetworkId
          bucketName: !Ref MetadataBucket
          pvtkey: "ethSystemKey"
      Handler: index.handler
      Runtime: nodejs14.x
      CodeUri: lambdas/nftMetadata/.
      Description: GetMetaData 
      Timeout: 10
      Role: !GetAtt nftMetadataRole.Arn
      # Policies: 
      #   - AWSLambdaBasicExecutionRole
      #   - AWSLambda_ReadOnlyAccess
      #   - AmazonManagedBlockchainFullAccess 
      #   - AmazonSSMReadOnlyAccess
      #   - S3ReadPolicy:
      #       BucketName: !Ref MetadataBucket
      Events:
        postEndpoint:
          Type: Api
          Properties:
            RestApiId: !Ref nftapi
            Path: /assets/{metadata}
            Method: GET
            Auth: 
              Authorizer: MyLambdaTokenAuth
      Layers:
        - !Ref onchainUtils


  nftMetadataRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              Action: 'sts:AssumeRole'
              Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
          ManagedPolicyArns:
            - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            - arn:aws:iam::aws:policy/AWSLambda_ReadOnlyAccess
            - arn:aws:iam::aws:policy/AmazonManagedBlockchainFullAccess
            - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
          Path: /
          Policies:
            - PolicyName: S3ReadPolicy
              PolicyDocument: 
                Version: '2012-10-17'
                Statement:
                  Action: 
                    - "s3:GetObject"
                    - "s3:ListBucket"
                    - "s3:GetBucketLocation"
                    - "s3:GetObjectVersion"
                    - "s3:GetLifecycleConfiguration"
                  Effect: Allow
                  Resource:
                    - !Join ['', ['arn:aws:s3:::',!Ref MetadataBucket, '/*']]
                    - !Join ['', ['arn:aws:s3:::',!Ref MetadataBucket]]

  onchainUtils:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: onchain-utils
      Description: blockchain utils
      ContentUri: lambdas/shared/.
      CompatibleRuntimes:
        - nodejs14.x
    Metadata:
      BuildMethod : nodejs14.x
  

  MetadataBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref MetadataBucket
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Action:
              - 's3:GetObject'
              - 's3:GetObjectVersion'
            Effect: Allow
            Resource: !Join ['', ['arn:aws:s3:::',!Ref MetadataBucket, '/*']]
            Principal:
              AWS: !GetAtt nftMetadataRole.Arn
          - Action:
              - 's3:PutObject'
              - 's3:PutObjectAcl'
            Effect: Allow
            Resource: !Join ['', ['arn:aws:s3:::',!Ref MetadataBucket, '/*']]
            Principal:
              AWS: !GetAtt nftMintRole.Arn

        
              


Outputs:
  nftApi:
    Value: !Ref nftapi

  NetworkId:
    Description: Network Id
    Value: !GetAtt EthereumNode.NetworkId

  NodeId:
    Description: Node Id
    Value: !GetAtt EthereumNode.NodeId

  MatadataBucket:
    Value: !Ref MetadataBucket
